"""
This script analyze the simulations generated by mc_get_spectra.py
it estimates the mean and numerical covariances from the simulations
"""


from pspy import pspy_utils, so_dict, so_spectra
import numpy as np
import sys

d = so_dict.so_dict()
d.read_from_file(sys.argv[1])

type = d["type"]
surveys = d["surveys"]
iStart = d["iStart"]
iStop = d["iStop"]


tf_dir = "sim_spectra_for_tf"
mc_dir = "montecarlo"

pspy_utils.create_directory(mc_dir)

spectra = ["TT", "TE", "TB", "ET", "BT", "EE", "EB", "BE", "BB"]

spec_list = []
for id_sv1, sv1 in enumerate(surveys):
    arrays_1 = d["arrays_%s" % sv1]
    for id_ar1, ar1 in enumerate(arrays_1):
        for id_sv2, sv2 in enumerate(surveys):
            arrays_2 = d["arrays_%s" % sv2]
            for id_ar2, ar2 in enumerate(arrays_2):
                if  (id_sv1 == id_sv2) & (id_ar1 > id_ar2) : continue
                if  (id_sv1 > id_sv2) : continue
                spec_list += ["%s_%sx%s_%s" % (sv1, ar1, sv2, ar2)]



for sid, spec in enumerate(spec_list):

    tf = {}
    mean =Â {}
    std = {}
    
    
    tf["TT"] = []
    tf["EE"] = []
    tf["BB"] = []

    for spectrum in ["TT", "EE", "BB"]:

        for iii in range(iStart, iStop):
        
            spec_name_no_filter = "%s_%s_nofilter_%05d" % (type, spec, iii)
            spec_name_filter = "%s_%s_filter_%05d" % (type, spec, iii)

            lb, ps_nofilt = so_spectra.read_ps(tf_dir + "/%s.dat" % spec_name_no_filter, spectra=spectra)
            lb, ps_filt = so_spectra.read_ps(tf_dir + "/%s.dat" % spec_name_filter, spectra=spectra)
        
            tf[spectrum] += [ps_filt[spectrum]/ps_nofilt[spectrum] ]
        
        mean[spectrum]  = np.mean(tf[spectrum], axis = 0)
        std[spectrum]  = np.std(tf[spectrum], axis = 0)

    np.savetxt("%s/tf_%s.dat" % (mc_dir, spec), np.array([lb, mean["TT"], std["TT"], mean["EE"], std["EE"], mean["BB"], std["BB"]]).T)

